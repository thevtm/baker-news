package post_comments_page

import (
	"fmt"

	"github.com/samber/lo"
  "github.com/thevtm/baker-news/state"
	"github.com/thevtm/baker-news/app/template_page"
	"github.com/thevtm/baker-news/app/post_block"
)

func voteBoxID(postID int64) string {
  return fmt.Sprintf("comment-vote-box-%d", postID)
}

templ CommentVoteButton(comment_id int64, vote_value state.VoteValue, active bool) {
  {{ post_vote_value := lo.If(active, state.VoteValueNone).Else(vote_value) }}
  {{ vote_box_id := voteBoxID(comment_id) }}

  <button class={ lo.If(active, "").Else("grayscale") }
    hx-post="/post/comment/vote"
    hx-target={ fmt.Sprintf("#%s", vote_box_id) }
    hx-vals={ fmt.Sprintf(`{"comment_id": %d, "vote_value": "%s"}`, comment_id, post_vote_value) }>
    { lo.If(vote_value == state.VoteValueUp, "ðŸ”¼").Else("ðŸ”½") }
  </button>
}

templ Comment(comment_node *PostCommentNode) {
  {{ comment := comment_node.Comment }}
  {{ author := comment_node.Author }}
  {{ vote_value := comment_node.VoteValue }}

  <div>
    { fmt.Sprintf("[%d]%s %s %s", comment.Score, vote_value, author.Username, comment.Content) }

    <div class="pl-2">
      for _, child := range comment_node.Children {
        @Comment(child)
      }
    </div>
  </div>
}

templ PostMain(post *state.Post, author *state.User, post_vote_value state.VoteValue, comment_roots *[]*PostCommentNode) {
  <div class="container mx-auto bg-orange-100 py-1">
    @post_block.Post(post, author, post_vote_value)

    <form class="mx-8 my-2" hx-post="/post/comment/add">
      <input type="hidden" name="post_id" value={ fmt.Sprint(post.ID) }>
      <textarea class="my-2 block w-full" name="content" rows="8" wrap="virtual"></textarea>
      <button class="py-1 px-2 bg-gray-300" type="submit">Add Comment</button>
    </form>

    <div class="mx-8 my-2">
      for _, comment_node := range *comment_roots {
        @Comment(comment_node)
      }
    </div>
  </div>
}

templ PostPage(user *state.User, post *state.Post, author *state.User, post_vote_value state.VoteValue, comment_roots *[]*PostCommentNode) {
  @template_page.TemplatePage(user, PostMain(post, author, post_vote_value, comment_roots))
}
