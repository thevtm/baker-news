package post_comments_page

import (
	"fmt"
	"slices"

	"github.com/samber/lo"
  "github.com/thevtm/baker-news/state"
	"github.com/thevtm/baker-news/app/template_page"
	"github.com/thevtm/baker-news/app/post_block"
	"github.com/thevtm/baker-news/app/components"
	"github.com/xeonx/timeago"
)

type PostCommentNode struct {
	Comment   *state.Comment
	Author    *state.User
	VoteValue state.VoteValue
	Children  []*PostCommentNode
}

func NewPostCommentNode(comment *state.Comment, author *state.User, vote_value state.VoteValue) *PostCommentNode {
	return &PostCommentNode{
		Comment:   comment,
		Author:    author,
		VoteValue: vote_value,
		Children:  make([]*PostCommentNode, 0),
	}
}

func (p *PostCommentNode) AddChild(child *PostCommentNode) {
	p.Children = append(p.Children, child)
	slices.SortFunc(p.Children, func(a, b *PostCommentNode) int {
		return -1 * Compare(a.Comment.Score, b.Comment.Score)
	})
}

func voteBoxID(postID int64) string {
  return fmt.Sprintf("comment-vote-box-%d", postID)
}


templ Comment(comment *state.Comment, author *state.User, vote_value state.VoteValue) {
  {{ comment_block_id := fmt.Sprintf("post-block-%d", comment.ID) }}

  <div id={comment_block_id} class="flex my-1">
    <div class="flex flex-col mx-2">
      {{ up := vote_value == state.VoteValueUp }}
      @components.VoteButton(components.VoteButtonParams{
        HxPost: "/post/comment/vote",
        HxTarget: "#" + comment_block_id,
        HxSwap: "outerHTML",
        HxVals: fmt.Sprintf(`{"comment_id": %d, "vote_value": "%s"}`, comment.ID,
          lo.If(up, state.VoteValueNone).Else(state.VoteValueUp)),
        Active: up,
        Icon: components.VoteIconUp(),
      })

      {{ down := vote_value == state.VoteValueDown }}
      @components.VoteButton(components.VoteButtonParams{
        HxPost: "/post/comment/vote",
        HxTarget: "#" + comment_block_id,
        HxSwap: "outerHTML",
        HxVals: fmt.Sprintf(`{"comment_id": %d, "vote_value": "%s"}`, comment.ID,
          lo.If(down, state.VoteValueNone).Else(state.VoteValueDown)),
        Active: down,
        Icon: components.VoteIconDown(),
      })
    </div>

    <div class="flex flex-col text-black">

      <div class="flex text-xs text-gray-500">
        <span class="post-score">{ fmt.Sprint(comment.Score) }</span>&nbsp;points by { fmt.Sprint(author.Username) }
        { timeago.English.Format(comment.CreatedAt.Time) }
        <span class="mx-1">|</span>
        <a class="hover:underline" href="#" hx-get="/post/comment/edit">edit</a>
        <span class="mx-1">|</span>
        <a class="hover:underline" href="#" hx-get="/post/comment/reply">reply</a>
      </div>

      <div class="text-sm">
        { fmt.Sprint(comment.Content) }
      </div>

    </div>
  </div>
}


templ CommentNode(comment_node *PostCommentNode) {
  {{ comment := comment_node.Comment }}
  {{ author := comment_node.Author }}
  {{ vote_value := comment_node.VoteValue }}

  @Comment(comment, author, vote_value)

  if len(comment_node.Children) > 0 {
    <div class="pl-8">
      for _, child := range comment_node.Children {
        @CommentNode(child)
      }
    </div>
  }
}

templ PostMain(post *state.Post, author *state.User, post_vote_value state.VoteValue, comment_roots *[]*PostCommentNode) {
  <div class="container mx-auto bg-orange-100 py-1">
    @post_block.Post(post, author, post_vote_value)

    <form class="mx-8 my-2 mb-6" hx-post="/post/comment/add" hx-target="#comments" hx-swap="afterbegin">
      <input type="hidden" name="post_id" value={ fmt.Sprint(post.ID) }>
      <textarea _="on htmx:afterRequest from closest <form/> set my value to ''"
        class="my-2 block w-full" name="content" rows="8" wrap="virtual"></textarea>
      <button class="py-1 px-2 bg-gray-300" type="submit">Add Comment</button>
    </form>

    <div id="comments" class="my-2">
      for _, comment_node := range *comment_roots {
        @CommentNode(comment_node)
      }
    </div>
  </div>
}

templ PostPage(user *state.User, post *state.Post, author *state.User, post_vote_value state.VoteValue, comment_roots *[]*PostCommentNode) {
  @template_page.TemplatePage(user, PostMain(post, author, post_vote_value, comment_roots))
}
