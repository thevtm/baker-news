// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package state

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const commentsForPost = `-- name: CommentsForPost :many
SELECT id, post_id, author_id, parent_comment_id, content, score, db_created_at, db_updated_at FROM comments
  WHERE post_id = $1
`

func (q *Queries) CommentsForPost(ctx context.Context, postID int64) ([]Comment, error) {
	rows, err := q.db.Query(ctx, commentsForPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.AuthorID,
			&i.ParentCommentID,
			&i.Content,
			&i.Score,
			&i.DbCreatedAt,
			&i.DbUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const commentsForPostWithAuthorAndVotesForUser = `-- name: CommentsForPostWithAuthorAndVotesForUser :many
SELECT comments.id, comments.post_id, comments.author_id, comments.parent_comment_id, comments.content, comments.score, comments.db_created_at, comments.db_updated_at, author.id, author.username, author.role, author.db_created_at, author.db_updated_at, comment_votes.value AS vote_value FROM comments
  JOIN users author ON comments.author_id = author.id
  LEFT JOIN comment_votes ON comments.id = comment_votes.comment_id AND comment_votes.user_id = $1
  WHERE comments.post_id = $2
`

type CommentsForPostWithAuthorAndVotesForUserParams struct {
	UserID int64
	PostID int64
}

type CommentsForPostWithAuthorAndVotesForUserRow struct {
	Comment   Comment
	User      User
	VoteValue NullVoteValue
}

func (q *Queries) CommentsForPostWithAuthorAndVotesForUser(ctx context.Context, arg CommentsForPostWithAuthorAndVotesForUserParams) ([]CommentsForPostWithAuthorAndVotesForUserRow, error) {
	rows, err := q.db.Query(ctx, commentsForPostWithAuthorAndVotesForUser, arg.UserID, arg.PostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommentsForPostWithAuthorAndVotesForUserRow
	for rows.Next() {
		var i CommentsForPostWithAuthorAndVotesForUserRow
		if err := rows.Scan(
			&i.Comment.ID,
			&i.Comment.PostID,
			&i.Comment.AuthorID,
			&i.Comment.ParentCommentID,
			&i.Comment.Content,
			&i.Comment.Score,
			&i.Comment.DbCreatedAt,
			&i.Comment.DbUpdatedAt,
			&i.User.ID,
			&i.User.Username,
			&i.User.Role,
			&i.User.DbCreatedAt,
			&i.User.DbUpdatedAt,
			&i.VoteValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createComment = `-- name: CreateComment :one
WITH updated_posts AS (
  UPDATE posts
    SET comments_count = comments_count + 1
    WHERE id = $1
    RETURNING id
)
INSERT INTO comments (
    post_id, author_id, parent_comment_id, content, score
  ) VALUES (
    $1, $2, $3, $4, 1
  )
  RETURNING id, post_id, author_id, parent_comment_id, content, score, db_created_at, db_updated_at
`

type CreateCommentParams struct {
	PostID          int64
	AuthorID        int64
	ParentCommentID pgtype.Int8
	Content         string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.PostID,
		arg.AuthorID,
		arg.ParentCommentID,
		arg.Content,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.AuthorID,
		&i.ParentCommentID,
		&i.Content,
		&i.Score,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    title, url, author_id, score, comments_count
  ) VALUES (
    $1, $2, $3, 1, 0
  )
  RETURNING id, title, url, author_id, score, comments_count, created_at, db_created_at, db_updated_at
`

type CreatePostParams struct {
	Title    string
	Url      string
	AuthorID int64
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.Title, arg.Url, arg.AuthorID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.AuthorID,
		&i.Score,
		&i.CommentsCount,
		&i.CreatedAt,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, role
) VALUES (
  $1, $2
)
RETURNING id, username, role, db_created_at, db_updated_at
`

type CreateUserParams struct {
	Username string
	Role     UserRole
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
WITH updated_posts AS (
  UPDATE posts
    SET comments_count = comments_count - 1
    WHERE id = (SELECT post_id FROM comments WHERE id = $1)
)
DELETE FROM comments
  WHERE comments.id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
  WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const downVoteComment = `-- name: DownVoteComment :one
SELECT id, comment_id, user_id, value, db_created_at, db_updated_at FROM down_vote_comment($1, $2)
`

type DownVoteCommentParams struct {
	CommentID int64
	UserID    int64
}

func (q *Queries) DownVoteComment(ctx context.Context, arg DownVoteCommentParams) (CommentVote, error) {
	row := q.db.QueryRow(ctx, downVoteComment, arg.CommentID, arg.UserID)
	var i CommentVote
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserID,
		&i.Value,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const downVotePost = `-- name: DownVotePost :one
SELECT id, post_id, user_id, value, db_created_at, db_updated_at FROM down_vote_post($1, $2)
`

type DownVotePostParams struct {
	PostID int64
	UserID int64
}

func (q *Queries) DownVotePost(ctx context.Context, arg DownVotePostParams) (PostVote, error) {
	row := q.db.QueryRow(ctx, downVotePost, arg.PostID, arg.UserID)
	var i PostVote
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Value,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const getComment = `-- name: GetComment :one

SELECT id, post_id, author_id, parent_comment_id, content, score, db_created_at, db_updated_at FROM comments
  WHERE id = $1 LIMIT 1
`

// ------------------------------------------------------------------------------
// Comment Queries
// ------------------------------------------------------------------------------
func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRow(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.AuthorID,
		&i.ParentCommentID,
		&i.Content,
		&i.Score,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const getPost = `-- name: GetPost :one

SELECT id, title, url, author_id, score, comments_count, created_at, db_created_at, db_updated_at FROM posts
  WHERE id = $1 LIMIT 1
`

// ------------------------------------------------------------------------------
// Post Queries
// ------------------------------------------------------------------------------
func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.AuthorID,
		&i.Score,
		&i.CommentsCount,
		&i.CreatedAt,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const getPostWithAuthorAndUserVote = `-- name: GetPostWithAuthorAndUserVote :one
SELECT posts.id, posts.title, posts.url, posts.author_id, posts.score, posts.comments_count, posts.created_at, posts.db_created_at, posts.db_updated_at, author.id, author.username, author.role, author.db_created_at, author.db_updated_at, post_votes.value AS vote_value FROM posts
  JOIN users author ON posts.author_id = author.id
  LEFT JOIN post_votes ON posts.id = post_votes.post_id AND post_votes.user_id = $1
  WHERE posts.id = $2
`

type GetPostWithAuthorAndUserVoteParams struct {
	UserID int64
	PostID int64
}

type GetPostWithAuthorAndUserVoteRow struct {
	Post      Post
	User      User
	VoteValue NullVoteValue
}

func (q *Queries) GetPostWithAuthorAndUserVote(ctx context.Context, arg GetPostWithAuthorAndUserVoteParams) (GetPostWithAuthorAndUserVoteRow, error) {
	row := q.db.QueryRow(ctx, getPostWithAuthorAndUserVote, arg.UserID, arg.PostID)
	var i GetPostWithAuthorAndUserVoteRow
	err := row.Scan(
		&i.Post.ID,
		&i.Post.Title,
		&i.Post.Url,
		&i.Post.AuthorID,
		&i.Post.Score,
		&i.Post.CommentsCount,
		&i.Post.CreatedAt,
		&i.Post.DbCreatedAt,
		&i.Post.DbUpdatedAt,
		&i.User.ID,
		&i.User.Username,
		&i.User.Role,
		&i.User.DbCreatedAt,
		&i.User.DbUpdatedAt,
		&i.VoteValue,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, username, role, db_created_at, db_updated_at FROM users
  WHERE id = $1 LIMIT 1
`

// ------------------------------------------------------------------------------
// User Queries
// ------------------------------------------------------------------------------
func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, role, db_created_at, db_updated_at FROM users
  WHERE LOWER(username) = LOWER($1)
  LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const isUsernameTaken = `-- name: IsUsernameTaken :one
SELECT EXISTS (
  SELECT 1 FROM users
    WHERE LOWER(username) = LOWER($1)
)
`

func (q *Queries) IsUsernameTaken(ctx context.Context, lower string) (bool, error) {
	row := q.db.QueryRow(ctx, isUsernameTaken, lower)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const latestPosts = `-- name: LatestPosts :many
SELECT id, title, url, author_id, score, comments_count, created_at, db_created_at, db_updated_at FROM posts
  ORDER BY created_at DESC
  LIMIT $1
`

func (q *Queries) LatestPosts(ctx context.Context, limit int64) ([]Post, error) {
	rows, err := q.db.Query(ctx, latestPosts, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.AuthorID,
			&i.Score,
			&i.CommentsCount,
			&i.CreatedAt,
			&i.DbCreatedAt,
			&i.DbUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, role, db_created_at, db_updated_at FROM users
  ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Role,
			&i.DbCreatedAt,
			&i.DbUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const noneVoteComment = `-- name: NoneVoteComment :one
SELECT id, comment_id, user_id, value, db_created_at, db_updated_at FROM none_vote_comment($1, $2)
`

type NoneVoteCommentParams struct {
	CommentID int64
	UserID    int64
}

func (q *Queries) NoneVoteComment(ctx context.Context, arg NoneVoteCommentParams) (CommentVote, error) {
	row := q.db.QueryRow(ctx, noneVoteComment, arg.CommentID, arg.UserID)
	var i CommentVote
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserID,
		&i.Value,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const noneVotePost = `-- name: NoneVotePost :one
SELECT id, post_id, user_id, value, db_created_at, db_updated_at FROM none_vote_post($1, $2)
`

type NoneVotePostParams struct {
	PostID int64
	UserID int64
}

func (q *Queries) NoneVotePost(ctx context.Context, arg NoneVotePostParams) (PostVote, error) {
	row := q.db.QueryRow(ctx, noneVotePost, arg.PostID, arg.UserID)
	var i PostVote
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Value,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const topPosts = `-- name: TopPosts :many
SELECT id, title, url, author_id, score, comments_count, created_at, db_created_at, db_updated_at FROM posts
  ORDER BY score DESC
  LIMIT $1
`

func (q *Queries) TopPosts(ctx context.Context, limit int64) ([]Post, error) {
	rows, err := q.db.Query(ctx, topPosts, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.AuthorID,
			&i.Score,
			&i.CommentsCount,
			&i.CreatedAt,
			&i.DbCreatedAt,
			&i.DbUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const topPostsWithAuthorAndVotesForUser = `-- name: TopPostsWithAuthorAndVotesForUser :many
SELECT posts.id, posts.title, posts.url, posts.author_id, posts.score, posts.comments_count, posts.created_at, posts.db_created_at, posts.db_updated_at, author.id, author.username, author.role, author.db_created_at, author.db_updated_at, post_votes.value AS vote_value FROM posts
  JOIN users author ON posts.author_id = author.id
  LEFT JOIN post_votes ON posts.id = post_votes.post_id AND post_votes.user_id = $1
  ORDER BY score DESC
  LIMIT $2
`

type TopPostsWithAuthorAndVotesForUserParams struct {
	UserID int64
	Limit  int64
}

type TopPostsWithAuthorAndVotesForUserRow struct {
	Post      Post
	User      User
	VoteValue NullVoteValue
}

// TODO: Look into performance of this query, maybe add a multicolumn index
// TODO: I ran into a bug where using `sqlc.embed` with a `LEFT JOIN` didn't work as expected (https://github.com/sqlc-dev/sqlc/issues/3269)
func (q *Queries) TopPostsWithAuthorAndVotesForUser(ctx context.Context, arg TopPostsWithAuthorAndVotesForUserParams) ([]TopPostsWithAuthorAndVotesForUserRow, error) {
	rows, err := q.db.Query(ctx, topPostsWithAuthorAndVotesForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TopPostsWithAuthorAndVotesForUserRow
	for rows.Next() {
		var i TopPostsWithAuthorAndVotesForUserRow
		if err := rows.Scan(
			&i.Post.ID,
			&i.Post.Title,
			&i.Post.Url,
			&i.Post.AuthorID,
			&i.Post.Score,
			&i.Post.CommentsCount,
			&i.Post.CreatedAt,
			&i.Post.DbCreatedAt,
			&i.Post.DbUpdatedAt,
			&i.User.ID,
			&i.User.Username,
			&i.User.Role,
			&i.User.DbCreatedAt,
			&i.User.DbUpdatedAt,
			&i.VoteValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upVoteComment = `-- name: UpVoteComment :one
SELECT id, comment_id, user_id, value, db_created_at, db_updated_at FROM up_vote_comment($1, $2)
`

type UpVoteCommentParams struct {
	CommentID int64
	UserID    int64
}

func (q *Queries) UpVoteComment(ctx context.Context, arg UpVoteCommentParams) (CommentVote, error) {
	row := q.db.QueryRow(ctx, upVoteComment, arg.CommentID, arg.UserID)
	var i CommentVote
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserID,
		&i.Value,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const upVotePost = `-- name: UpVotePost :one

SELECT id, post_id, user_id, value, db_created_at, db_updated_at FROM up_vote_post($1, $2)
`

type UpVotePostParams struct {
	PostID int64
	UserID int64
}

// ------------------------------------------------------------------------------
// Votes Queries
// ------------------------------------------------------------------------------
func (q *Queries) UpVotePost(ctx context.Context, arg UpVotePostParams) (PostVote, error) {
	row := q.db.QueryRow(ctx, upVotePost, arg.PostID, arg.UserID)
	var i PostVote
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Value,
		&i.DbCreatedAt,
		&i.DbUpdatedAt,
	)
	return i, err
}

const updateCommentContent = `-- name: UpdateCommentContent :exec
UPDATE comments
  SET content = $2
  WHERE id = $1
`

type UpdateCommentContentParams struct {
	ID      int64
	Content string
}

func (q *Queries) UpdateCommentContent(ctx context.Context, arg UpdateCommentContentParams) error {
	_, err := q.db.Exec(ctx, updateCommentContent, arg.ID, arg.Content)
	return err
}
